enum resendCodeEnum {
  PASSWORD
  VERIFICATION
}

enum MessageType {
  text
}

type generalOutput {
  success: Boolean!
  message: String!
}
type UserAuth {
  userId: String!
  token: String!
}

type Address {
  street: String
  city: String
  state: String
}

type User {
  _id: ID!
  name: String!
  email: String!
  isVerified: Boolean!
  online: Boolean!
  isAdmin: Boolean!
  createdAt: String!
  updatedAt: String!
  role: String
  imageUrl: String
  lastLogin: String
  phone: String
  organization: Organization
}

type Organization {
  name: String!
  email: String!
  address: Address
  imageUrl: String
  bannerUrl: String
  invitedEmails: [String]!
  createdAt: String!
  updatedAt: String!
  user: User!
  groups: [Group]!
  members: [User]!
}

type Group {
  name: String!
  avatar: String
  isDefault: Boolean!
  organization: Organization!
  participants: [User]!
}

type verifyInvitation {
  newUser: Boolean!
  isVerified: Boolean!
}
type MessageObject {
  messageType: MessageType!
  data: String!
}
type PrivateMessage {
  _id: ID!
  message: MessageObject!
  status: String!
  organization: ID!
  recipient: ID!
  sender: ID!
  repliedMessage: ID
}
type GroupMessage {
  _id: ID!
  message: MessageObject!
  status: String!
  organization: ID!
  group: ID!
  sender: ID!
  repliedMessage: ID
}

input CreateOrganizationAccount {
  name: String!
  email: String!
  password: String!
  phone: String
  organizationName: String!
  organizationEmail: String!
  address: String
}
input CreateUserAccount {
  name: String!
  email: String!
  password: String!
  organization: ID!
  phone: String
}

input CreateGroup {
  name: String!
  participants: [ID]!
}

input findOrganization {
  email: String!
}

input GroupInvitation {
  organization: ID!
  group: ID!
  participants: [ID!]!
}
input MessageObjectInput {
  messageType: MessageType!
  data: String!
}

input PrivateMessageInput {
  message: MessageObjectInput!
  recipient: ID!
  repliedMessage: ID
}

input GroupMessageInput {
  message: MessageObjectInput!
  group: ID!
  repliedMessage: ID
}

type Query {
  user: User!
  users: [User]!
  contacts: [User]!
  findOrganization(where: findOrganization!): ID!
}

type Mutation {
  createOrganizationAccount(data: CreateOrganizationAccount!): UserAuth!
  createUserAccount(data: CreateUserAccount!): UserAuth!
  verifyAccount(code: Int!): Boolean!
  resendCode(type: resendCodeEnum!, email: String): Boolean!
  resetPassword(code: Int!, password: String!, email: String!): Boolean!
  login(email: String!, password: String!): UserAuth!
  changePassword(oldPassword: String!, newPassword: String!): Boolean!
  invite(email: String!): Boolean!
  verifyInvitation(email: String!, organization: ID!): verifyInvitation!
  createGroup(data: CreateGroup!): Group!
  inviteToGroup(data: GroupInvitation!): Boolean!
  removeFromGroup(data: GroupInvitation!): Boolean!
  sendPrivateMessage(data: PrivateMessageInput!): PrivateMessage!
  sendGroupMessage(data: GroupMessageInput!): GroupMessage!
}

type Schema {
  query: Query
  mutation: Mutation
}
